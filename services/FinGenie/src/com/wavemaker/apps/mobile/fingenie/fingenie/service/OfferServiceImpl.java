/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.apps.mobile.fingenie.fingenie.Offer;
import com.wavemaker.apps.mobile.fingenie.fingenie.OfferFeedback;


/**
 * ServiceImpl object for domain model class Offer.
 *
 * @see Offer
 */
@Service("FinGenie.OfferService")
public class OfferServiceImpl implements OfferService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfferServiceImpl.class);

    @Autowired
	@Qualifier("FinGenie.OfferFeedbackService")
	private OfferFeedbackService offerFeedbackService;

    @Autowired
    @Qualifier("FinGenie.OfferDao")
    private WMGenericDao<Offer, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Offer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FinGenieTransactionManager")
    @Override
	public Offer create(Offer offer) {
        LOGGER.debug("Creating a new Offer with information: {}", offer);
        Offer offerCreated = this.wmGenericDao.create(offer);
        if(offerCreated.getOfferFeedbacks() != null) {
            for(OfferFeedback offerFeedback : offerCreated.getOfferFeedbacks()) {
                offerFeedback.setOffer(offerCreated);
                LOGGER.debug("Creating a new child OfferFeedback with information: {}", offerFeedback);
                offerFeedbackService.create(offerFeedback);
            }
        }
        return offerCreated;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Offer getById(Integer offerIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Finding Offer by id: {}", offerIdInstance);
        Offer offer = this.wmGenericDao.findById(offerIdInstance);
        if (offer == null){
            LOGGER.debug("No Offer found with id: {}", offerIdInstance);
            throw new EntityNotFoundException(String.valueOf(offerIdInstance));
        }
        return offer;
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Offer findById(Integer offerIdInstance) {
        LOGGER.debug("Finding Offer by id: {}", offerIdInstance);
        return this.wmGenericDao.findById(offerIdInstance);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FinGenieTransactionManager")
	@Override
	public Offer update(Offer offer) throws EntityNotFoundException {
        LOGGER.debug("Updating Offer with information: {}", offer);
        this.wmGenericDao.update(offer);

        Integer offerIdInstance = offer.getOfferId();

        return this.wmGenericDao.findById(offerIdInstance);
    }

    @Transactional(value = "FinGenieTransactionManager")
	@Override
	public Offer delete(Integer offerIdInstance) throws EntityNotFoundException {
        LOGGER.debug("Deleting Offer with id: {}", offerIdInstance);
        Offer deleted = this.wmGenericDao.findById(offerIdInstance);
        if (deleted == null) {
            LOGGER.debug("No Offer found with id: {}", offerIdInstance);
            throw new EntityNotFoundException(String.valueOf(offerIdInstance));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Page<Offer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Offers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<Offer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Offers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FinGenie for table Offer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<OfferFeedback> findAssociatedOfferFeedbacks(Integer offerId, Pageable pageable) {
        LOGGER.debug("Fetching all associated offerFeedbacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("offer.offerId = '" + offerId + "'");

        return offerFeedbackService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfferFeedbackService instance
	 */
	protected void setOfferFeedbackService(OfferFeedbackService service) {
        this.offerFeedbackService = service;
    }

}

