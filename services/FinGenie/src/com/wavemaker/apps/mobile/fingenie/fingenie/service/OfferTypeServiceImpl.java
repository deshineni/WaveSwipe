/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.apps.mobile.fingenie.fingenie.Offer;
import com.wavemaker.apps.mobile.fingenie.fingenie.OfferType;


/**
 * ServiceImpl object for domain model class OfferType.
 *
 * @see OfferType
 */
@Service("FinGenie.OfferTypeService")
public class OfferTypeServiceImpl implements OfferTypeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfferTypeServiceImpl.class);

    @Autowired
	@Qualifier("FinGenie.OfferService")
	private OfferService offerService;

    @Autowired
    @Qualifier("FinGenie.OfferTypeDao")
    private WMGenericDao<OfferType, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OfferType, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FinGenieTransactionManager")
    @Override
	public OfferType create(OfferType offerTypeInstance) {
        LOGGER.debug("Creating a new OfferType with information: {}", offerTypeInstance);
        OfferType offerTypeInstanceCreated = this.wmGenericDao.create(offerTypeInstance);
        if(offerTypeInstanceCreated.getOffers() != null) {
            for(Offer offer : offerTypeInstanceCreated.getOffers()) {
                offer.setOfferType(offerTypeInstanceCreated);
                LOGGER.debug("Creating a new child Offer with information: {}", offer);
                offerService.create(offer);
            }
        }
        return offerTypeInstanceCreated;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public OfferType getById(Integer offertypeId) throws EntityNotFoundException {
        LOGGER.debug("Finding OfferType by id: {}", offertypeId);
        OfferType offerTypeInstance = this.wmGenericDao.findById(offertypeId);
        if (offerTypeInstance == null){
            LOGGER.debug("No OfferType found with id: {}", offertypeId);
            throw new EntityNotFoundException(String.valueOf(offertypeId));
        }
        return offerTypeInstance;
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public OfferType findById(Integer offertypeId) {
        LOGGER.debug("Finding OfferType by id: {}", offertypeId);
        return this.wmGenericDao.findById(offertypeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FinGenieTransactionManager")
	@Override
	public OfferType update(OfferType offerTypeInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating OfferType with information: {}", offerTypeInstance);
        this.wmGenericDao.update(offerTypeInstance);

        Integer offertypeId = offerTypeInstance.getOfferTypeId();

        return this.wmGenericDao.findById(offertypeId);
    }

    @Transactional(value = "FinGenieTransactionManager")
	@Override
	public OfferType delete(Integer offertypeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OfferType with id: {}", offertypeId);
        OfferType deleted = this.wmGenericDao.findById(offertypeId);
        if (deleted == null) {
            LOGGER.debug("No OfferType found with id: {}", offertypeId);
            throw new EntityNotFoundException(String.valueOf(offertypeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Page<OfferType> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OfferTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<OfferType> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OfferTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FinGenie for table OfferType to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<Offer> findAssociatedOffers(Integer offerTypeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated offers");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("offerType.offerTypeId = '" + offerTypeId + "'");

        return offerService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfferService instance
	 */
	protected void setOfferService(OfferService service) {
        this.offerService = service;
    }

}

