/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.apps.mobile.fingenie.fingenie.Bank;
import com.wavemaker.apps.mobile.fingenie.fingenie.Offer;

/**
 * Service object for domain model class {@link Bank}.
 */
public interface BankService {

    /**
     * Creates a new Bank. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Bank if any.
     *
     * @param bank Details of the Bank to be created; value cannot be null.
     * @return The newly created Bank.
     */
	Bank create(Bank bank);


	/**
	 * Returns Bank by given id if exists.
	 *
	 * @param bankIdInstance The id of the Bank to get; value cannot be null.
	 * @return Bank associated with the given bankIdInstance.
     * @throws EntityNotFoundException If no Bank is found.
	 */
	Bank getById(Integer bankIdInstance) throws EntityNotFoundException;

    /**
	 * Find and return the Bank by given id if exists, returns null otherwise.
	 *
	 * @param bankIdInstance The id of the Bank to get; value cannot be null.
	 * @return Bank associated with the given bankIdInstance.
	 */
	Bank findById(Integer bankIdInstance);


	/**
	 * Updates the details of an existing Bank. It replaces all fields of the existing Bank with the given bank.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Bank if any.
     *
	 * @param bank The details of the Bank to be updated; value cannot be null.
	 * @return The updated Bank.
	 * @throws EntityNotFoundException if no Bank is found with given input.
	 */
	Bank update(Bank bank) throws EntityNotFoundException;

    /**
	 * Deletes an existing Bank with the given id.
	 *
	 * @param bankIdInstance The id of the Bank to be deleted; value cannot be null.
	 * @return The deleted Bank.
	 * @throws EntityNotFoundException if no Bank found with the given id.
	 */
	Bank delete(Integer bankIdInstance) throws EntityNotFoundException;

	/**
	 * Find all Banks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Banks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Bank> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Banks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Banks.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Bank> findAll(String query, Pageable pageable);

    /**
	 * Exports all Banks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Banks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Bank.
	 */
	long count(String query);

    /*
     * Returns the associated offers for given Bank id.
     *
     * @param bankId value of bankId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Offer instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Offer> findAssociatedOffers(Integer bankId, Pageable pageable);

}

