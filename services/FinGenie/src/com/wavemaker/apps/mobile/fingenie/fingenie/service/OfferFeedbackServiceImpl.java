/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.apps.mobile.fingenie.fingenie.OfferFeedback;


/**
 * ServiceImpl object for domain model class OfferFeedback.
 *
 * @see OfferFeedback
 */
@Service("FinGenie.OfferFeedbackService")
public class OfferFeedbackServiceImpl implements OfferFeedbackService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfferFeedbackServiceImpl.class);


    @Autowired
    @Qualifier("FinGenie.OfferFeedbackDao")
    private WMGenericDao<OfferFeedback, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OfferFeedback, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FinGenieTransactionManager")
    @Override
	public OfferFeedback create(OfferFeedback offerFeedback) {
        LOGGER.debug("Creating a new OfferFeedback with information: {}", offerFeedback);
        OfferFeedback offerFeedbackCreated = this.wmGenericDao.create(offerFeedback);
        return offerFeedbackCreated;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public OfferFeedback getById(Integer offerfeedbackId) throws EntityNotFoundException {
        LOGGER.debug("Finding OfferFeedback by id: {}", offerfeedbackId);
        OfferFeedback offerFeedback = this.wmGenericDao.findById(offerfeedbackId);
        if (offerFeedback == null){
            LOGGER.debug("No OfferFeedback found with id: {}", offerfeedbackId);
            throw new EntityNotFoundException(String.valueOf(offerfeedbackId));
        }
        return offerFeedback;
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public OfferFeedback findById(Integer offerfeedbackId) {
        LOGGER.debug("Finding OfferFeedback by id: {}", offerfeedbackId);
        return this.wmGenericDao.findById(offerfeedbackId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FinGenieTransactionManager")
	@Override
	public OfferFeedback update(OfferFeedback offerFeedback) throws EntityNotFoundException {
        LOGGER.debug("Updating OfferFeedback with information: {}", offerFeedback);
        this.wmGenericDao.update(offerFeedback);

        Integer offerfeedbackId = offerFeedback.getOfferFeedbackId();

        return this.wmGenericDao.findById(offerfeedbackId);
    }

    @Transactional(value = "FinGenieTransactionManager")
	@Override
	public OfferFeedback delete(Integer offerfeedbackId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OfferFeedback with id: {}", offerfeedbackId);
        OfferFeedback deleted = this.wmGenericDao.findById(offerfeedbackId);
        if (deleted == null) {
            LOGGER.debug("No OfferFeedback found with id: {}", offerfeedbackId);
            throw new EntityNotFoundException(String.valueOf(offerfeedbackId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Page<OfferFeedback> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OfferFeedbacks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<OfferFeedback> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OfferFeedbacks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FinGenie for table OfferFeedback to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

