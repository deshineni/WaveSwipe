/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.apps.mobile.fingenie.fingenie.Session;
import com.wavemaker.apps.mobile.fingenie.fingenie.service.SessionService;

/**
 * Controller object for domain model class Session.
 * @see Session
 */
@RestController("FinGenie.SessionController")
@Api(value = "SessionController", description = "Exposes APIs to work with Session resource.")
@RequestMapping("/FinGenie/Session")
public class SessionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SessionController.class);

    @Autowired
    @Qualifier("FinGenie.SessionService")
    private SessionService sessionService;

    @ApiOperation(value = "Creates a new Session instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Session createSession(@RequestBody Session session) {
        LOGGER.debug("Create Session with information: {}", session);
        session = sessionService.create(session);
        LOGGER.debug("Created Session with information: {}", session);
        return session;
    }

    @ApiOperation(value = "Returns the Session instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Session getSession(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Session with id: {}", id);
        Session foundSession = sessionService.getById(id);
        LOGGER.debug("Session details with id: {}", foundSession);
        return foundSession;
    }

    @ApiOperation(value = "Updates the Session instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Session editSession(@PathVariable("id") Integer id, @RequestBody Session session) throws EntityNotFoundException {
        LOGGER.debug("Editing Session with id: {}", session.getSessionId());
        session.setSessionId(id);
        session = sessionService.update(session);
        LOGGER.debug("Session details with id: {}", session);
        return session;
    }

    @ApiOperation(value = "Deletes the Session instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSession(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Session with id: {}", id);
        Session deletedSession = sessionService.delete(id);
        return deletedSession != null;
    }

    /**
     * @deprecated Use {@link #findSessions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Session instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Session> findSessions(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Sessions list");
        return sessionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Session instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Session> findSessions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Sessions list");
        return sessionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSessions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return sessionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Session instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countSessions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Sessions");
        return sessionService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SessionService instance
	 */
    protected void setSessionService(SessionService service) {
        this.sessionService = service;
    }
}
