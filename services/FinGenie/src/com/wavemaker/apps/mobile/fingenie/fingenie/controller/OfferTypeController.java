/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.apps.mobile.fingenie.fingenie.Offer;
import com.wavemaker.apps.mobile.fingenie.fingenie.OfferType;
import com.wavemaker.apps.mobile.fingenie.fingenie.service.OfferTypeService;

/**
 * Controller object for domain model class OfferType.
 * @see OfferType
 */
@RestController("FinGenie.OfferTypeController")
@Api(value = "OfferTypeController", description = "Exposes APIs to work with OfferType resource.")
@RequestMapping("/FinGenie/OfferType")
public class OfferTypeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfferTypeController.class);

    @Autowired
    @Qualifier("FinGenie.OfferTypeService")
    private OfferTypeService offerTypeService;

    @ApiOperation(value = "Creates a new OfferType instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfferType createOfferType(@RequestBody OfferType offerTypeInstance) {
        LOGGER.debug("Create OfferType with information: {}", offerTypeInstance);
        offerTypeInstance = offerTypeService.create(offerTypeInstance);
        LOGGER.debug("Created OfferType with information: {}", offerTypeInstance);
        return offerTypeInstance;
    }

    @ApiOperation(value = "Returns the OfferType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfferType getOfferType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OfferType with id: {}", id);
        OfferType foundOfferType = offerTypeService.getById(id);
        LOGGER.debug("OfferType details with id: {}", foundOfferType);
        return foundOfferType;
    }

    @ApiOperation(value = "Updates the OfferType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OfferType editOfferType(@PathVariable("id") Integer id, @RequestBody OfferType offerTypeInstance) throws EntityNotFoundException {
        LOGGER.debug("Editing OfferType with id: {}", offerTypeInstance.getOfferTypeId());
        offerTypeInstance.setOfferTypeId(id);
        offerTypeInstance = offerTypeService.update(offerTypeInstance);
        LOGGER.debug("OfferType details with id: {}", offerTypeInstance);
        return offerTypeInstance;
    }

    @ApiOperation(value = "Deletes the OfferType instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOfferType(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OfferType with id: {}", id);
        OfferType deletedOfferType = offerTypeService.delete(id);
        return deletedOfferType != null;
    }

    /**
     * @deprecated Use {@link #findOfferTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OfferType instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfferType> findOfferTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OfferTypes list");
        return offerTypeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of OfferType instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OfferType> findOfferTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OfferTypes list");
        return offerTypeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOfferTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return offerTypeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of OfferType instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countOfferTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting OfferTypes");
        return offerTypeService.count(query);
    }

    @RequestMapping(value = "/{id}/offers", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the offers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Offer> findAssociatedOffers(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated offers");
        return offerTypeService.findAssociatedOffers(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfferTypeService instance
	 */
    protected void setOfferTypeService(OfferTypeService service) {
        this.offerTypeService = service;
    }
}
