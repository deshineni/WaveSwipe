/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.wavemaker.apps.mobile.fingenie.fingenie.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.wavemaker.apps.mobile.fingenie.fingenie.OfferFeedback;
import com.wavemaker.apps.mobile.fingenie.fingenie.Session;
import com.wavemaker.apps.mobile.fingenie.fingenie.Users;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("FinGenie.UsersService")
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Autowired
	@Qualifier("FinGenie.OfferFeedbackService")
	private OfferFeedbackService offerFeedbackService;

    @Autowired
	@Qualifier("FinGenie.SessionService")
	private SessionService sessionService;

    @Autowired
    @Qualifier("FinGenie.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "FinGenieTransactionManager")
    @Override
	public Users create(Users users) {
        LOGGER.debug("Creating a new Users with information: {}", users);
        Users usersCreated = this.wmGenericDao.create(users);
        if(usersCreated.getSessions() != null) {
            for(Session session : usersCreated.getSessions()) {
                session.setUsers(usersCreated);
                LOGGER.debug("Creating a new child Session with information: {}", session);
                sessionService.create(session);
            }
        }

        if(usersCreated.getOfferFeedbacks() != null) {
            for(OfferFeedback offerFeedback : usersCreated.getOfferFeedbacks()) {
                offerFeedback.setUsers(usersCreated);
                LOGGER.debug("Creating a new child OfferFeedback with information: {}", offerFeedback);
                offerFeedbackService.create(offerFeedback);
            }
        }
        return usersCreated;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Users getById(Integer usersId) throws EntityNotFoundException {
        LOGGER.debug("Finding Users by id: {}", usersId);
        Users users = this.wmGenericDao.findById(usersId);
        if (users == null){
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        return users;
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "FinGenieTransactionManager")
	@Override
	public Users update(Users users) throws EntityNotFoundException {
        LOGGER.debug("Updating Users with information: {}", users);
        this.wmGenericDao.update(users);

        Integer usersId = users.getUserId();

        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(value = "FinGenieTransactionManager")
	@Override
	public Users delete(Integer usersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service FinGenie for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "FinGenieTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<Session> findAssociatedSessions(Integer userId, Pageable pageable) {
        LOGGER.debug("Fetching all associated sessions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.userId = '" + userId + "'");

        return sessionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "FinGenieTransactionManager")
    @Override
    public Page<OfferFeedback> findAssociatedOfferFeedbacks(Integer userId, Pageable pageable) {
        LOGGER.debug("Fetching all associated offerFeedbacks");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.userId = '" + userId + "'");

        return offerFeedbackService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfferFeedbackService instance
	 */
	protected void setOfferFeedbackService(OfferFeedbackService service) {
        this.offerFeedbackService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SessionService instance
	 */
	protected void setSessionService(SessionService service) {
        this.sessionService = service;
    }

}

